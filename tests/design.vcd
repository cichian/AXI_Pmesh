$date
	Sat May 21 01:27:22 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_axi_responder $end
$var wire 64 ! AXIML_ARADDR [63:0] $end
$var wire 1 " AXIML_ARVALID $end
$var wire 64 # AXIML_AWADDR [63:0] $end
$var wire 1 $ AXIML_AWVALID $end
$var wire 1 % AXIML_BREADY $end
$var wire 1 & AXIML_RREADY $end
$var wire 2 ' AXIML_RRESP [1:0] $end
$var wire 64 ( AXIML_WDATA [63:0] $end
$var wire 8 ) AXIML_WSTRB [7:0] $end
$var wire 1 * AXIML_WVALID $end
$var wire 1 + clk $end
$var wire 1 , mem_bridge_rdy $end
$var wire 1 - rst $end
$var wire 1 . mem_bridge_val $end
$var wire 64 / mem_bridge_dat [63:0] $end
$var wire 1 0 bridge_mem_val $end
$var wire 1 1 bridge_mem_rdy $end
$var wire 64 2 bridge_mem_dat [63:0] $end
$var wire 1 3 AXIML_WREADY $end
$var wire 1 4 AXIML_RVALID $end
$var wire 64 5 AXIML_RDATA [63:0] $end
$var wire 1 6 AXIML_BVALID $end
$var wire 2 7 AXIML_BRESP [1:0] $end
$var wire 1 8 AXIML_AWREADY $end
$var wire 1 9 AXIML_ARREADY $end
$var reg 1 : r_rst $end
$var reg 8 ; test_id [7:0] $end
$scope module dut $end
$var wire 1 < araddr_fifo_ren $end
$var wire 64 = araddr_fifo_wdata [63:0] $end
$var wire 1 > araddr_fifo_wval $end
$var wire 1 ? awaddr_fifo_ren $end
$var wire 64 @ awaddr_fifo_wdata [63:0] $end
$var wire 1 A awaddr_fifo_wval $end
$var wire 1 B axi2noc_msg_type_load $end
$var wire 1 C axi2noc_msg_type_store $end
$var wire 1 + clk $end
$var wire 14 D dest_chipid [13:0] $end
$var wire 4 E dest_fbits [3:0] $end
$var wire 8 F dest_xpos [7:0] $end
$var wire 8 G dest_ypos [7:0] $end
$var wire 64 H m_axi_araddr [63:0] $end
$var wire 1 9 m_axi_arready $end
$var wire 1 " m_axi_arvalid $end
$var wire 64 I m_axi_awaddr [63:0] $end
$var wire 1 8 m_axi_awready $end
$var wire 1 $ m_axi_awvalid $end
$var wire 1 % m_axi_bready $end
$var wire 1 & m_axi_rready $end
$var wire 2 J m_axi_rresp [1:0] $end
$var wire 64 K m_axi_wdata [63:0] $end
$var wire 1 3 m_axi_wready $end
$var wire 8 L m_axi_wstrb [7:0] $end
$var wire 1 * m_axi_wvalid $end
$var wire 64 M noc2_data_in [63:0] $end
$var wire 64 N noc2_data_out [63:0] $end
$var wire 1 O noc2_ready_out $end
$var wire 1 P noc2_valid_in $end
$var wire 1 0 noc2_valid_out $end
$var wire 64 Q noc3_data_out [63:0] $end
$var wire 1 R noc3_ready_in $end
$var wire 1 , noc3_ready_out $end
$var wire 1 S noc3_valid_out $end
$var wire 1 T noc_load_done $end
$var wire 1 U noc_store_done $end
$var wire 1 : rst $end
$var wire 14 V src_chipid [13:0] $end
$var wire 4 W src_fbits [3:0] $end
$var wire 8 X src_xpos [7:0] $end
$var wire 8 Y src_ypos [7:0] $end
$var wire 1 Z type_fifo_ren $end
$var wire 1 [ type_fifo_wval $end
$var wire 1 \ wdata_fifo_ren $end
$var wire 64 ] wdata_fifo_wdata [63:0] $end
$var wire 1 ^ wdata_fifo_wval $end
$var wire 1 _ write_channel_ready $end
$var wire 1 ` wstrb_fifo_ren $end
$var wire 8 a wstrb_fifo_wdata [7:0] $end
$var wire 1 b wstrb_fifo_wval $end
$var wire 1 c wstrb_outputside_ready $end
$var wire 1 d wstrb_outputside_valid $end
$var wire 1 e wstrb_fifoside_valid $end
$var wire 1 f wstrb_fifoside_ready $end
$var wire 8 g wstrb_fifo_out [7:0] $end
$var wire 1 h wstrb_fifo_full $end
$var wire 1 i wstrb_fifo_empty $end
$var wire 64 j wdata_fifo_out [63:0] $end
$var wire 1 k wdata_fifo_full $end
$var wire 1 l wdata_fifo_empty $end
$var wire 2 m type_fifo_wdata [1:0] $end
$var wire 2 n type_fifo_out [1:0] $end
$var wire 1 o type_fifo_full $end
$var wire 1 p type_fifo_empty $end
$var wire 3 q pmesh_data_size [2:0] $end
$var wire 6 r pmesh_addr [5:0] $end
$var wire 1 . noc3_valid_in $end
$var wire 64 s noc3_data_in [63:0] $end
$var wire 1 1 noc2_ready_in $end
$var wire 1 4 m_axi_rvalid $end
$var wire 64 t m_axi_rdata [63:0] $end
$var wire 1 6 m_axi_bvalid $end
$var wire 2 u m_axi_bresp [1:0] $end
$var wire 8 v fifo_out_mux [7:0] $end
$var wire 1 w fifo_has_packet $end
$var wire 2 x axi2noc_msg_type [1:0] $end
$var wire 64 y awaddr_fifo_out [63:0] $end
$var wire 1 z awaddr_fifo_full $end
$var wire 1 { awaddr_fifo_empty $end
$var wire 64 | araddr_fifo_out [63:0] $end
$var wire 1 } araddr_fifo_full $end
$var wire 1 ~ araddr_fifo_empty $end
$var reg 6 !" buf_pmesh_addr [5:0] $end
$var reg 3 "" buf_pmesh_data_size [2:0] $end
$var reg 2 #" fifo_valid_next_state [1:0] $end
$var reg 2 $" fifo_valid_state [1:0] $end
$var reg 64 %" flit [63:0] $end
$var reg 1 &" flit_ready $end
$var reg 3 '" flit_state [2:0] $end
$var reg 64 (" msg_address [63:0] $end
$var reg 3 )" msg_data_size [2:0] $end
$var reg 8 *" msg_length [7:0] $end
$var reg 8 +" msg_mshrid [7:0] $end
$var reg 6 ," msg_options_1 [5:0] $end
$var reg 16 -" msg_options_2 [15:0] $end
$var reg 30 ." msg_options_3 [29:0] $end
$var reg 8 /" msg_type [7:0] $end
$var reg 3 0" noc_cnt [2:0] $end
$var reg 1 1" noc_last_data $end
$var reg 1 2" noc_last_header $end
$var integer 32 3" file [31:0] $end
$var integer 32 4" file2 [31:0] $end
$var integer 32 5" file3 [31:0] $end
$var integer 32 6" file4 [31:0] $end
$scope begin genblk3 $end
$scope begin DATA_GEN[0] $end
$upscope $end
$upscope $end
$scope module awaddr_fifo $end
$var wire 1 + clk $end
$var wire 1 ? ren $end
$var wire 1 : reset $end
$var wire 64 7" wdata [63:0] $end
$var wire 1 A wval $end
$var reg 1 { empty $end
$var reg 1 z full $end
$var reg 64 8" rdata [63:0] $end
$var reg 6 9" sync_buf_counter_f [5:0] $end
$var reg 6 :" sync_buf_counter_next [5:0] $end
$var reg 4 ;" sync_rd_ptr_f [3:0] $end
$var reg 4 <" sync_rd_ptr_next [3:0] $end
$var reg 4 =" sync_wr_ptr_f [3:0] $end
$var reg 4 >" sync_wr_ptr_next [3:0] $end
$upscope $end
$scope module noc_response_axilite $end
$var wire 1 + clk $end
$var wire 1 % m_axi_bready $end
$var wire 64 ?" m_axi_rdata [63:0] $end
$var wire 1 & m_axi_rready $end
$var wire 2 @" m_axi_rresp [1:0] $end
$var wire 1 4 m_axi_rvalid $end
$var wire 1 A" noc_io_go $end
$var wire 1 B" noc_ready_in $end
$var wire 1 , noc_ready_out $end
$var wire 1 C" ren $end
$var wire 1 : rst $end
$var wire 64 D" rdata [63:0] $end
$var wire 1 . noc_valid_in $end
$var wire 64 E" noc_data_in [63:0] $end
$var wire 1 F" full $end
$var wire 1 G" empty $end
$var reg 2 H" m_axi_bresp [1:0] $end
$var reg 1 6 m_axi_bvalid $end
$var reg 8 I" msg_counter_f [7:0] $end
$var reg 8 J" msg_counter_next [7:0] $end
$var reg 1 K" msg_data_done $end
$var reg 8 L" msg_payload_len [7:0] $end
$var reg 3 M" msg_state_f [2:0] $end
$var reg 3 N" msg_state_next [2:0] $end
$var reg 64 O" noc_data_out [63:0] $end
$var reg 1 P" noc_valid_out $end
$var reg 6 Q" r_reqbuf_size [5:0] $end
$var reg 6 R" w_reqbuf_size [5:0] $end
$var reg 64 S" wdata [63:0] $end
$var reg 1 T" wval $end
$scope begin genblk1 $end
$upscope $end
$scope module raddr_fifo $end
$var wire 1 + clk $end
$var wire 1 C" ren $end
$var wire 1 : reset $end
$var wire 64 U" wdata [63:0] $end
$var wire 1 T" wval $end
$var reg 1 G" empty $end
$var reg 1 F" full $end
$var reg 64 V" rdata [63:0] $end
$var reg 6 W" sync_buf_counter_f [5:0] $end
$var reg 6 X" sync_buf_counter_next [5:0] $end
$var reg 4 Y" sync_rd_ptr_f [3:0] $end
$var reg 4 Z" sync_rd_ptr_next [3:0] $end
$var reg 4 [" sync_wr_ptr_f [3:0] $end
$var reg 4 \" sync_wr_ptr_next [3:0] $end
$upscope $end
$upscope $end
$scope module raddr_fifo $end
$var wire 1 + clk $end
$var wire 1 < ren $end
$var wire 1 : reset $end
$var wire 64 ]" wdata [63:0] $end
$var wire 1 > wval $end
$var reg 1 ~ empty $end
$var reg 1 } full $end
$var reg 64 ^" rdata [63:0] $end
$var reg 6 _" sync_buf_counter_f [5:0] $end
$var reg 6 `" sync_buf_counter_next [5:0] $end
$var reg 4 a" sync_rd_ptr_f [3:0] $end
$var reg 4 b" sync_rd_ptr_next [3:0] $end
$var reg 4 c" sync_wr_ptr_f [3:0] $end
$var reg 4 d" sync_wr_ptr_next [3:0] $end
$upscope $end
$scope module strb2mask_ins $end
$var wire 1 + clk $end
$var wire 1 c d_channel_ready $end
$var wire 8 e" m_axi_wstrb [7:0] $end
$var wire 1 f" need_split $end
$var wire 1 : rst $end
$var wire 1 g" rx $end
$var wire 1 e s_channel_valid $end
$var wire 1 h" split $end
$var wire 1 i" tx $end
$var wire 1 f s_channel_ready $end
$var wire 1 d d_channel_valid $end
$var reg 15 j" all_match [14:0] $end
$var reg 8 k" input_data [7:0] $end
$var reg 1 l" last_split $end
$var reg 2 m" next_ready_state [1:0] $end
$var reg 8 n" output_mask [7:0] $end
$var reg 15 o" part_match [14:0] $end
$var reg 6 p" pmesh_addr [5:0] $end
$var reg 3 q" pmesh_data_size [2:0] $end
$var reg 8 r" pmesh_mask [7:0] $end
$var reg 2 s" ready_state [1:0] $end
$var reg 8 t" reverse_source [7:0] $end
$var reg 8 u" source_d [7:0] $end
$var reg 8 v" source_q [7:0] $end
$var reg 1 w" tx_delay_stage_1 $end
$var reg 1 x" valid_state $end
$var reg 1 y" valid_state_next $end
$var integer 32 z" i [31:0] $end
$var integer 32 {" j [31:0] $end
$var integer 32 |" k [31:0] $end
$upscope $end
$scope module type_fifo $end
$var wire 1 + clk $end
$var wire 1 Z ren $end
$var wire 1 : reset $end
$var wire 2 }" wdata [1:0] $end
$var wire 1 [ wval $end
$var reg 1 p empty $end
$var reg 1 o full $end
$var reg 2 ~" rdata [1:0] $end
$var reg 6 !# sync_buf_counter_f [5:0] $end
$var reg 6 "# sync_buf_counter_next [5:0] $end
$var reg 4 ## sync_rd_ptr_f [3:0] $end
$var reg 4 $# sync_rd_ptr_next [3:0] $end
$var reg 4 %# sync_wr_ptr_f [3:0] $end
$var reg 4 &# sync_wr_ptr_next [3:0] $end
$upscope $end
$scope module waddr_fifo $end
$var wire 1 + clk $end
$var wire 1 \ ren $end
$var wire 1 : reset $end
$var wire 64 '# wdata [63:0] $end
$var wire 1 ^ wval $end
$var reg 1 l empty $end
$var reg 1 k full $end
$var reg 64 (# rdata [63:0] $end
$var reg 6 )# sync_buf_counter_f [5:0] $end
$var reg 6 *# sync_buf_counter_next [5:0] $end
$var reg 4 +# sync_rd_ptr_f [3:0] $end
$var reg 4 ,# sync_rd_ptr_next [3:0] $end
$var reg 4 -# sync_wr_ptr_f [3:0] $end
$var reg 4 .# sync_wr_ptr_next [3:0] $end
$upscope $end
$scope module wstrb_fifo $end
$var wire 1 + clk $end
$var wire 1 ` ren $end
$var wire 1 : reset $end
$var wire 8 /# wdata [7:0] $end
$var wire 1 b wval $end
$var reg 1 i empty $end
$var reg 1 h full $end
$var reg 8 0# rdata [7:0] $end
$var reg 6 1# sync_buf_counter_f [5:0] $end
$var reg 6 2# sync_buf_counter_next [5:0] $end
$var reg 4 3# sync_rd_ptr_f [3:0] $end
$var reg 4 4# sync_rd_ptr_next [3:0] $end
$var reg 4 5# sync_wr_ptr_f [3:0] $end
$var reg 4 6# sync_wr_ptr_next [3:0] $end
$upscope $end
$upscope $end
$scope module fake_mem_ctrl $end
$var wire 1 + clk $end
$var wire 64 7# noc_data_in [63:0] $end
$var wire 1 , noc_ready_out $end
$var wire 1 0 noc_valid_in $end
$var wire 1 8# rst_n $end
$var wire 8 9# msg_type [7:0] $end
$var wire 8 :# msg_src_y [7:0] $end
$var wire 8 ;# msg_src_x [7:0] $end
$var wire 4 <# msg_src_fbits [3:0] $end
$var wire 14 =# msg_src_chipid [13:0] $end
$var wire 192 ># msg_send_header [191:0] $end
$var wire 8 ?# msg_mshrid [7:0] $end
$var wire 3 @# msg_data_size [2:0] $end
$var wire 40 A# msg_addr [39:0] $end
$var reg 8 B# buf_in_counter_f [7:0] $end
$var reg 8 C# buf_in_counter_next [7:0] $end
$var reg 64 D# buf_in_mem_next [63:0] $end
$var reg 4 E# buf_in_wr_ptr_f [3:0] $end
$var reg 4 F# buf_in_wr_ptr_next [3:0] $end
$var reg 8 G# buf_out_counter_f [7:0] $end
$var reg 8 H# buf_out_counter_next [7:0] $end
$var reg 4 I# buf_out_rd_ptr_f [3:0] $end
$var reg 4 J# buf_out_rd_ptr_next [3:0] $end
$var reg 192 K# mem_header_in [191:0] $end
$var reg 1 L# mem_ready_in $end
$var reg 64 M# mem_temp [63:0] $end
$var reg 1 N# mem_valid_in $end
$var reg 8 O# msg_send_length [7:0] $end
$var reg 8 P# msg_send_type [7:0] $end
$var reg 64 Q# noc_data_out [63:0] $end
$var reg 1 1 noc_ready_in $end
$var reg 1 . noc_valid_out $end
$var reg 64 R# sim_memory_rd_addr [63:0] $end
$var reg 64 S# sim_memory_wr_addr [63:0] $end
$var reg 512 T# sim_memory_wr_data [511:0] $end
$var reg 1 U# sim_memory_write $end
$var reg 64 V# write_mask [63:0] $end
$var integer 32 W# i [31:0] $end
$scope module decoder $end
$var wire 192 X# msg_header [191:0] $end
$var reg 40 Y# msg_addr [39:0] $end
$var reg 1 Z# msg_cache_type $end
$var reg 3 [# msg_data_size [2:0] $end
$var reg 1 \# msg_l2_miss $end
$var reg 1 ]# msg_last_subline $end
$var reg 8 ^# msg_length [7:0] $end
$var reg 6 _# msg_lsid [5:0] $end
$var reg 2 `# msg_mesi [1:0] $end
$var reg 8 a# msg_mshrid [7:0] $end
$var reg 10 b# msg_sdid [9:0] $end
$var reg 14 c# msg_src_chipid [13:0] $end
$var reg 4 d# msg_src_fbits [3:0] $end
$var reg 8 e# msg_src_x [7:0] $end
$var reg 8 f# msg_src_y [7:0] $end
$var reg 2 g# msg_subline_id [1:0] $end
$var reg 4 h# msg_subline_vector [3:0] $end
$var reg 8 i# msg_type [7:0] $end
$upscope $end
$scope module encoder $end
$var wire 40 j# msg_addr [39:0] $end
$var wire 1 k# msg_cache_type $end
$var wire 3 l# msg_data_size [2:0] $end
$var wire 14 m# msg_dst_chipid [13:0] $end
$var wire 4 n# msg_dst_fbits [3:0] $end
$var wire 8 o# msg_dst_x [7:0] $end
$var wire 8 p# msg_dst_y [7:0] $end
$var wire 1 q# msg_l2_miss $end
$var wire 1 r# msg_last_subline $end
$var wire 8 s# msg_length [7:0] $end
$var wire 6 t# msg_lsid [5:0] $end
$var wire 2 u# msg_mesi [1:0] $end
$var wire 8 v# msg_mshrid [7:0] $end
$var wire 10 w# msg_sdid [9:0] $end
$var wire 14 x# msg_src_chipid [13:0] $end
$var wire 4 y# msg_src_fbits [3:0] $end
$var wire 8 z# msg_src_x [7:0] $end
$var wire 8 {# msg_src_y [7:0] $end
$var wire 2 |# msg_subline_id [1:0] $end
$var wire 4 }# msg_subline_vector [3:0] $end
$var wire 8 ~# msg_type [7:0] $end
$var reg 192 !$ msg_header [191:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0000000000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xxxxxxxxxxxxxxxx00x001 !$
bx ~#
b0 }#
b0 |#
b0 {#
b0 z#
b0 y#
b0 x#
b0 w#
bx v#
b0 u#
b0 t#
b0 s#
1r#
xq#
bx p#
bx o#
bx n#
bx m#
b0 l#
0k#
bx j#
bx i#
bx h#
bx g#
bx f#
bx e#
bx d#
bx c#
bx b#
bx a#
bx `#
bx _#
bx ^#
x]#
x\#
bx [#
xZ#
bx Y#
bx X#
b10000000 W#
bx V#
0U#
b0 T#
b0 S#
b0 R#
bx Q#
bx P#
b0 O#
xN#
b0 M#
xL#
bx K#
bx J#
bx I#
bx H#
bx G#
bx F#
bx E#
bx D#
bx C#
bx B#
bx A#
bx @#
bx ?#
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0000000000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xxxxxxxxxxxxxxxx00x001 >#
bx =#
bx <#
bx ;#
bx :#
bx 9#
08#
b0 7#
b0 6#
bx 5#
b0 4#
bx 3#
b0 2#
bx 1#
bx 0#
bz /#
b0 .#
bx -#
b0 ,#
bx +#
b0 *#
bx )#
bx (#
bz '#
b0 &#
bx %#
b0 $#
bx ##
b0 "#
bx !#
bx ~"
b0 }"
bx |"
bx {"
bx z"
xy"
xx"
xw"
bx v"
bx u"
bx t"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
bx m"
xl"
bx k"
bx j"
xi"
xh"
xg"
xf"
bx e"
b0 d"
bx c"
b0 b"
bx a"
b0 `"
bx _"
bx ^"
bz ]"
b0 \"
bx ["
b0 Z"
bx Y"
b0 X"
bx W"
bx V"
bx U"
xT"
bx S"
bx R"
bx Q"
xP"
bx O"
bx N"
bx M"
bx L"
xK"
bx J"
bx I"
bx H"
xG"
xF"
bx E"
bx D"
xC"
1B"
xA"
b0 @"
bx ?"
b0 >"
bx ="
b0 <"
bx ;"
b0 :"
bx 9"
bx 8"
bz 7"
b10000000000000000000000000000110 6"
b10000000000000000000000000000100 5"
b10000000000000000000000000000101 4"
b10000000000000000000000000000011 3"
x2"
x1"
bx 0"
bx /"
b0 ."
b0 -"
b0 ,"
b0 +"
bx *"
bx )"
bx ("
bx '"
0&"
b0 %"
bx $"
bx #"
bx ""
bx !"
x~
x}
bx |
x{
xz
bx y
b0 x
xw
bx v
bx u
bx t
bx s
bx r
bx q
xp
xo
bx n
b0 m
xl
xk
bx j
xi
xh
bx g
xf
xe
xd
xc
0b
bz a
x`
x_
0^
bz ]
x\
0[
xZ
b0 Y
b0 X
b0 W
b0 V
xU
xT
zS
0R
bz Q
0P
zO
b0 N
b0 M
bz L
bz K
b0 J
bz I
bz H
b0 G
b0 F
b0 E
b0 D
0C
0B
0A
bz @
x?
0>
bz =
x<
b10 ;
1:
x9
x8
bx 7
x6
bx 5
x4
x3
b0 2
x1
00
bx /
x.
1-
x,
1+
0*
bz )
bz (
b0 '
1&
1%
0$
bz #
0"
bz !
$end
#5000
0+
#10000
0h"
0U
18
13
0w
b11111111 k"
0f"
0T
0<
1_
0`
b11111111 v
b11111111 e"
0\
0?
19
0Z
0A"
04
0C"
b0 /
b0 s
b0 E"
b0 Q#
b0 J#
1L#
0.
b0 H#
b0 F#
0N#
11
b0 C#
0c
b100 )"
b0 *"
01"
02"
b0 #"
0i"
0}
1~
0h
1i
b111111111111110 o"
b1111 |"
b1 j"
b1111 {"
b1111 z"
b11111111 t"
b11111111 u"
b0 r
b0 p"
b100 q
b100 q"
b11111111 n"
b0 m"
0f
0y"
0g"
0k
1l
0z
1{
0o
1p
06
b0 7
b0 u
b0 H"
0K"
b0 J"
b1 N"
1,
0F"
1G"
b0 I#
b0 G#
b0 E#
b0 B#
b0 '"
b0 ""
b0 !"
b0 0"
0e
b0 $"
b0 c"
b0 a"
b0 _"
b0 5#
b0 3#
b0 1#
b11111111 v"
b11111111 r"
b0 s"
0l"
0w"
0d
0x"
b0 -#
b0 +#
b0 )#
b0 ="
b0 ;"
b0 9"
b0 %#
b0 ##
b0 !#
b0 I"
b1 M"
b0 ["
b0 Y"
b0 W"
1+
#15000
0+
#20000
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0000000000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xxxxxxxx0000000000x001 >#
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0000000000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xxxxxxxx0000000000x001 !$
0]#
b0 g#
0\#
b0 `#
b0 ?#
b0 a#
b0 v#
b0 ^#
b0 9#
b0 i#
bx0000000000000000000000000000000000000000000000000000000000000000 K#
bx0000000000000000000000000000000000000000000000000000000000000000 X#
b0 D#
1+
#25000
0+
#30000
1+
#35000
0+
#40000
1+
#45000
0+
#50000
1+
#55000
0+
#60000
1+
#65000
0+
#70000
1+
#75000
0+
#80000
1+
#85000
0+
#90000
1+
#95000
0+
#100000
b1 &#
b1 "#
1[
b1 >"
b1 :"
b10 x
b10 m
b10 }"
b1 .#
b1 *#
b1 6#
b1 2#
1A
1C
1^
1b
b0 @
b0 7"
b0 #
b0 I
1$
1*
b11101111 ]
b11101111 '#
b11101111 (
b11101111 K
b11111111 a
b11111111 /#
b11111111 )
b11111111 L
18#
0:
0-
1+
#105000
0+
#110000
0[
b0 x
b0 m
b0 }"
0^
0b
0C
0A
0*
0$
b1 #"
1w
b0 ("
b0 )"
b11 *"
b1111 /"
b11111111 g
b11111111 0#
b1 6#
b1 2#
0i
b11101111 j
b11101111 (#
b1 .#
b1 *#
0l
b0 y
b0 8"
b1 >"
b1 :"
0{
b10 n
b10 ~"
b1 &#
b1 "#
0p
b1 5#
b1 1#
b1 -#
b1 )#
b1 ="
b1 9"
b1 %#
b1 !#
b0 S"
b0 U"
0T"
1+
#115000
0+
#120000
b1 m"
1c
1e
b1 $"
b1 0"
b1 '"
1+
#125000
0+
#130000
b10 m"
1i"
b10 #"
1f
b10 0"
b1 s"
1+
#135000
0+
#140000
1y"
0f
0i"
1w"
b10 s"
0e
b10 $"
b11 0"
1+
#145000
0+
#150000
b0 m"
0y"
1g"
b100 0"
0w"
1d
1x"
1+
#155000
0+
#160000
0g"
b100 )"
0c
0d
0x"
b0 s"
b101 0"
b100 ""
b10 '"
1+
#165000
0+
#170000
b110 0"
1+
#175000
0+
#180000
b111 0"
1+
#185000
0+
#190000
b0 0"
1+
#195000
0+
#200000
b1 F#
b1 C#
b110000111100000000000000 D#
10
1&"
b110000111100000000000000 2
b110000111100000000000000 N
b110000111100000000000000 7#
b110000111100000000000000 %"
b1 0"
1+
#205000
0+
#210000
b11 ^#
b1111 9#
b1111 i#
bx0000000000000000000000000000000000000000110000111100000000000000 K#
bx0000000000000000000000000000000000000000110000111100000000000000 X#
b10000000000 D#
b10 F#
b10 C#
b10000000000 2
b10000000000 N
b10000000000 7#
b10000000000 %"
b1 E#
b1 B#
b10 0"
1+
#215000
0+
#220000
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xxxxxxxx00000000000001 >#
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xxxxxxxx00000000000001 !$
0q#
b1111111111111111111111111111111111111111111111111111111111111111 V#
b0 D#
b0 A#
b0 Y#
b0 j#
b0 h#
0Z#
b100 @#
b100 [#
b0 2
b0 N
b0 7#
b0 %"
12"
b11 C#
b11 F#
bx00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000110000111100000000000000 K#
bx00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000110000111100000000000000 X#
b11 0"
b10 B#
b10 E#
1+
#225000
0+
#230000
b1 $#
b0 "#
b1 4#
b0 2#
b1 ,#
b0 *#
b1 <"
b0 :"
1Z
b0 #"
1`
1\
1?
b0xxxxxxxx00000000000001 >#
b0xxxxxxxx00000000000001 !$
1U
b0 _#
b0 b#
b0 <#
b0 d#
b0 n#
b0 :#
b0 f#
b0 p#
b0 ;#
b0 e#
b0 o#
b0 =#
b0 c#
b0 m#
b100000000000000000000000000000000000000000000000000110000111100000000000000 K#
b100000000000000000000000000000000000000000000000000110000111100000000000000 X#
b11101111 D#
b100 F#
b100 C#
b11101111 2
b11101111 N
b11101111 7#
b11101111 %"
11"
02"
b11 E#
b11 B#
b11 '"
b0 0"
1+
#235000
0+
#240000
0U
0Z
0w
0?
b0 *"
0\
0`
b1101100000000000001 >#
b1101100000000000001 !$
bx D#
b1 H#
1p
bx n
bx ~"
b1 $#
1{
bx y
bx 8"
b1 <"
1l
bx j
bx (#
b1 ,#
1i
bx g
bx 0#
b1 4#
b0 #"
00
0&"
b0 2
b0 N
b0 7#
b0 %"
01"
b0 C#
b0 F#
b11101111 T#
1U#
b11011 P#
b11011 ~#
01
1N#
b0 !#
b1 ##
b0 9"
b1 ;"
b0 )#
b1 +#
b0 1#
b1 3#
b0 $"
b0 '"
b100 B#
b100 E#
1+
#245000
0+
#250000
b0 L"
16
1A"
b0 H#
b1 J#
b1101100000000000001 /
b1101100000000000001 s
b1101100000000000001 E"
b1101100000000000001 Q#
0L#
1.
b0 T#
0U#
b110000111100000000000000 D#
0N#
11
b1 G#
b0 E#
b0 B#
1+
#255000
0+
#260000
0A"
06
1L#
0.
b0 H#
bx /
bx s
bx E"
bx Q#
b1 J#
b1101100000000000001 S"
b1101100000000000001 U"
b0 G#
b1 I#
1+
#265000
0+
#270000
bx S"
bx U"
1+
#275000
0+
#280000
1+
#285000
0+
#290000
1+
#295000
0+
#300000
1+
#305000
0+
#310000
1+
#315000
0+
#320000
1+
#325000
0+
#330000
1+
#335000
0+
#340000
1+
#345000
0+
#350000
1+
#355000
0+
#360000
b10 &#
b1 "#
1[
b1 x
b1 m
b1 }"
b1 d"
b1 `"
1>
b0 =
b0 ]"
b0 !
b0 H
1B
1"
1+
#365000
0+
#370000
0[
b0 x
b0 m
b0 }"
0>
0B
0"
1w
b10 *"
b1110 /"
b0 |
b0 ^"
b1 d"
b1 `"
0~
b1 n
b1 ~"
b10 &#
b1 "#
0p
b1 c"
b1 _"
b10 %#
b1 !#
1+
#375000
0+
#380000
b1 F#
b1 C#
b100000111000000000000000 D#
10
1&"
b100000111000000000000000 2
b100000111000000000000000 N
b100000111000000000000000 7#
b100000111000000000000000 %"
b1 0"
b10 '"
1+
#385000
0+
#390000
b10 ^#
b1110 9#
b1110 i#
b100000000000000000000000000000000000000000000000000100000111000000000000000 K#
b100000000000000000000000000000000000000000000000000100000111000000000000000 X#
b10000000000 D#
b10 F#
b10 C#
b10000000000 2
b10000000000 N
b10000000000 7#
b10000000000 %"
b1 E#
b1 B#
b10 0"
1+
#395000
0+
#400000
b10 $#
b0 "#
b1 b"
b0 `"
1Z
1<
b0 D#
1T
b0 2
b0 N
b0 7#
b0 %"
12"
b11 C#
b11 F#
b11 0"
b10 B#
b10 E#
1+
#405000
0+
#410000
b10001101000000000000001 >#
b10001101000000000000001 !$
b0 J#
b10 H#
b1 O#
b1 s#
b11010 P#
b11010 ~#
b0 C#
0<
0T
0w
b0 *"
0Z
b11101111 D#
b0 F#
01
1N#
00
0&"
02"
bx |
bx ^"
1~
bx n
bx ~"
1p
b11 E#
b11 B#
b0 '"
b0 0"
b1 a"
b0 _"
b10 ##
b0 !#
1+
#415000
0+
#420000
b1101000000000000001 >#
b1101000000000000001 !$
b1 L"
b100 N"
b0 O#
b0 s#
1A"
b1 J#
b1 H#
0N#
11
b100000111000000000000000 D#
0L#
1.
b10001101000000000000001 /
b10001101000000000000001 s
b10001101000000000000001 E"
b10001101000000000000001 Q#
b0 B#
b0 E#
b10 G#
b0 I#
1+
#425000
0+
#430000
b11101111 /
b11101111 s
b11101111 E"
b11101111 Q#
b10 J#
b0 H#
b1 J"
b1 I#
b1 G#
b100 M"
b10001101000000000000001 S"
b10001101000000000000001 U"
1+
#435000
0+
#440000
0A"
b1 \"
b1 X"
b0 J"
b0 L"
b1 N"
1K"
1L#
0.
b0 H#
bx /
bx s
bx E"
bx Q#
b10 J#
b11101111 S"
b11101111 U"
1T"
b1 I"
b0 G#
b10 I#
1+
#445000
0+
#450000
b1 Z"
b0 X"
14
1C"
0K"
b11101111 5
b11101111 t
b11101111 ?"
b11101111 D"
b11101111 V"
0G"
b0 I"
b1 M"
b1 ["
b1 W"
bx S"
bx U"
0T"
1+
#455000
0+
#460000
04
0C"
1G"
bx 5
bx t
bx ?"
bx D"
bx V"
b1 Z"
b0 W"
b1 Y"
1+
#465000
0+
#470000
1+
#475000
0+
#480000
1+
#485000
0+
#490000
1+
#495000
0+
#500000
1+
#505000
0+
#510000
1+
#515000
0+
#520000
1+
#525000
0+
#530000
1+
#535000
0+
#540000
1+
#545000
0+
#550000
1+
#555000
0+
#560001
